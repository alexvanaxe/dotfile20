#+title AVA Extra Configs
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/extra.el :results none

* Personal Configurations

 Here is my emacs configs personalizations. 

 The tangle is done to an extra file that is imported on the init.el.
 The results from the babel are set to none, are silenced.

* Basic Boilerplate

  Some initial nom important stuffs. Just personal stuffs.

  #+begin_src emacs-lisp

        (setq backup-directory-alist '(("." . "/home/alexvanaxe/Documents/.emacs_save")))

        (setq inhibit-startup-message t)
        (setq visible-bell t) ;; Set up the visible bell

        (scroll-bar-mode -1)        ; Disable visible scrollbar
        (tool-bar-mode -1)          ; Disable the toolbar
        (tooltip-mode -1)           ; Disable tooltips
        (menu-bar-mode -1)            ; Disable the menu bar

        (set-fringe-mode 10)        ; Give some breathing room

        ;; Make ESC quit prompts
        (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

        ;; Set the lines
        (column-number-mode)
        ;; (global-display-line-numbers-mode t)
        ;; (setq display-line-numbers-type 'relative)

        ;; Disable line numbers for some modes
        ;(dolist (mode '(org-mode-hook
        ;                term-mode-hook
        ;                shell-mode-hook
        ;                treemacs-mode-hook
        ;                eshell-mode-hook))
        ;   (add-hook mode (lambda () (display-line-numbers-mode 0))))

  #+end_src

* Use Packages Initial Config
** Basic Use Packages Config

   #+begin_src emacs-lisp
     ;; Initialize package sources
     (require 'package)

     (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

     (package-initialize)
     (unless package-archive-contents
     (package-refresh-contents))

     ;; Initialize use-package on non-Linux platforms
     (unless (package-installed-p 'use-package)
     (package-install 'use-package))

     (require 'use-package)
     (setq use-package-always-ensure t)

   #+end_src

* Required System packages

  #+begin_src emacs-lisp

    (use-package command-log-mode)

    (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
            :map ivy-minibuffer-map
            ("TAB" . ivy-alt-done)	
            ("C-l" . ivy-alt-done)
            ("C-j" . ivy-next-line)
            ("C-k" . ivy-previous-line)
            :map ivy-switch-buffer-map
            ("C-k" . ivy-previous-line)
            ("C-l" . ivy-done)
            ("C-d" . ivy-switch-buffer-kill)
            :map ivy-reverse-i-search-map
            ("C-k" . ivy-previous-line)
            ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

    (ivy-mode 1)

    (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

    (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

    (use-package counsel
    :bind (("<f5>" . 'counsel-switch-buffer)
            :map minibuffer-local-map
            ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

    (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

    (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

    (use-package general
    :after evil
    :config
    (general-create-definer ava/leader-keys
    :keymaps '(normal insert visual emacs)
        :prefix "C-,")
        ;:global-prefix "C-,")

    (ava/leader-keys
        ;"t"  '(:ignore t :which-key "toggles")
        ;"tt" '(counsel-load-theme :which-key "choose theme")
        "i1" '(lambda() (interactive)(find-file "~/.emacs.d/init.el"))
        "i2" '(lambda() (interactive)(find-file "~/Documents/Projects/MoneyWatch/coding-steps/MoneyWatch-api/money_watch/money_auth/views.py")))
    )

    (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-normal-state-map (kbd ", %") 'evil-window-vsplit)
    (define-key evil-normal-state-map (kbd ", \"") 'evil-window-split)
    (define-key evil-normal-state-map (kbd ", l") 'evil-window-right)
    (define-key evil-normal-state-map (kbd ", h") 'evil-window-left)
    (define-key evil-normal-state-map (kbd ", j") 'evil-window-down)
    (define-key evil-normal-state-map (kbd ", k") 'evil-window-up)

    ;; Use visual line motions even outside of visual-line-mode buffers
    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

    (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

    (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("<f4>" . projectile-command-map))
    ;; :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    ;; (when (file-directory-p "~/Projects/Code")
    ;;   (setq projectile-project-search-path '("~/Projects/Code")))
    ;; (setq projectile-switch-project-action #'projectile-dired))

    (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

    (use-package magit
    :commands magit-status)
    ;; NOTE: Make sure to configure a GitHub token before using this package!
    ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
    ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
    (use-package forge
      :after magit)

    (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
            (python-mode . lsp-deferred)
            ;; if you want which-key integration
            )
    :commands lsp-deferred)

    (use-package lsp-jedi
    :ensure t
    :config
    (with-eval-after-load "lsp-mode"
        (add-to-list 'lsp-disabled-clients 'pyls)
        (add-to-list 'lsp-enabled-clients 'jedi)))

    (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

    (use-package lsp-ui
    :config
    (setq lsp-ui-doc-position 'bottom))

    (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind ("C-c c" . company-complete)
    :config
    (setq company-idle-delay nil)
    )

    (use-package org
    :hook (org-mode . ava/org-mode-setup)
    :config
    (setq org-ellipsis " ")
    )

    (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


(use-package visual-fill-column
  :hook (org-mode . ava/org-mode-visual-fill))


    ;; (use-package company-box
    ;;   :hook (company-mode . company-mode-box)
    ;;   )


    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    ;; (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  #+end_src
  
* Configs
Here goes the configurations

#+begin_src emacs-lisp

    (defun ava/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

    (defun ava/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

    (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

        (with-eval-after-load 'org-faces
            (dolist (face '((org-level-1 . 1.2)
                            (org-level-2 . 1.1)
                            (org-level-3 . 1.05)
                            (org-level-4 . 1.0)
                            (org-level-5 . 1.1)
                            (org-level-6 . 1.1)
                            (org-level-7 . 1.1)
                            (org-level-8 . 1.1)))
            (set-face-attribute (car face) nil :weight 'regular :height (cdr face))))
            ;; (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))
    (setq org-confirm-babel-evaluate nil)

    (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

* Keymappings
#+begin_src emacs-lisp


#+end_src

* Testing other confs
Just a commented to make general confs. Put it in other config file!


** Test writing config file
   
  # #+begin_src conf-unix :tangle ~/testecfg

  # 	teste=23

  # #+end_src

** Little test passing values

  # #+NAME: result
  # #+begin_src python
  #   "Hello World"
  # #+end_src

  # #+begin_src conf-unix :tangle ~/teste2.cfg :noweb yes
  # 	valor=<<result>>
  # #+end_src 

* Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =ava/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun ava/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ava/org-babel-tangle-config)))

#+end_src

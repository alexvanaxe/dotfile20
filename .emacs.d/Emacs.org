#+title AVA Extra Configs
#+PROPERTY: header-args:emacs-lisp :tangle /home/alexvanaxe/.emacs.d/extra.el :results none

* Personal Configurations

 Here is my emacs configs personalizations. 

 The tangle is done to an extra file that is imported on the init.el.
 The results from the babel are set to none, are silenced.

* Configs parametters 

#+begin_src emacs-lisp

  ;; You will most likely need to adjust this font size for your system!
  (defvar ava/default-font-size 105)
  (defvar ava/default-variable-font-size 105)

  (defvar ava/transparency-level '(85 . 85))
  (defvar ava/transparency-level-list '(alpha . (85 . 85)))

  (defvar ava/leader-key "SPC")

#+end_src

* Startup timer
A Hook used to mesure the time emacs takes to startup. It is usefull so as we will add some more stuffs in it we can mesure time.

#+begin_src emacs-lisp

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

* Basic Boilerplate

  Some initial nom important stuffs. Just personal stuffs.

  #+begin_src emacs-lisp


    (setq inhibit-startup-message t)
    (setq visible-bell t) ;; Set up the visible bell

    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (menu-bar-mode -1)            ; Disable the menu bar

    (set-fringe-mode 10)        ; Give some breathing room

    (setq auto-save-default nil)

    ;; Make ESC quit prompts
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    ;; Set the lines
    (column-number-mode)
    (global-display-line-numbers-mode t)
    (setq display-line-numbers-type 'relative)

    ; Disable line numbers for some modes
    ;(dolist (mode '(org-mode-hook
    ;                term-mode-hook
    ;                shell-mode-hook
    ;                treemacs-mode-hook
    ;                eshell-mode-hook))
    ;   (add-hook mode (lambda () (display-line-numbers-mode 0))))

    (setq doom-modeline-modal-icon t)


    ;; (set-face-attribute 'variable-pitch nil :font "Cantarell" :height ava/default-variable-font-size :weight 'regular)

  #+end_src

* Use Packages Initial Config
** Basic Use Packages Config

   #+begin_src emacs-lisp
     ;; Initialize package sources
     (require 'package)

     (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

     (package-initialize)
     (unless package-archive-contents
     (package-refresh-contents))

     ;; Initialize use-package on non-Linux platforms
     (unless (package-installed-p 'use-package)
     (package-install 'use-package))

     (require 'use-package)
     (setq use-package-always-ensure t)

   #+end_src

* No littering!

Configure no littering so we can make the .emacs.d directory clean.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  (setq user-emacs-directory "~/Documents/.emacs")
  (setq user-emacs-configs-directory (concat (getenv "HOME") "/.emacs.d/"))

  (use-package no-littering)

  (setq backup-directory-alist '(("." . "/home/alexvanaxe/Documents/.emacs_save")))

#+end_src

* Imports

Some imports to make the config less acoplated.

#+begin_src emacs-lisp

(setq extra-config-file "~/.emacs.d/rice.el")
(load extra-config-file)

#+end_src

* Funcions Definitions 
Personal funcitions to deal with the interface.

#+begin_src emacs-lisp

    ;; Function to get a random value from the list passed 
    (defun random-choice (items)
    (let* ((size (length items))
            (index (random size)))
        (nth index items)))

    (defun get-theme()
    (when (string-equal (getenv "theme_name") "day")  (setq result (random-choice '(doom-gruvbox-light doom-one-light
                    spacemacs-light kaolin-breeze kaolin-valley-light doom-nord-light))))
    (when (string-equal (getenv "theme_name") "night") (setq result (random-choice '(doom-gruvbox doom-one doom-city-lights
                    kaolin-aurora kaolin-eclipse kaolin-valley-dark doom-moonlight doom-city-lights doom-material
                    doom-dracula doom-palenight))))
    result)

    (defun get-font()
    (when (string-equal (getenv "theme_name") "day")  (setq result (random-choice '("Fantasque Sans Mono"))))
    (when (string-equal (getenv "theme_name") "night") (setq result (random-choice '("Envy Code R"))))
    result2)

  (defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
  (set-frame-parameter
  nil 'alpha
  (if (eql (cond ((numberp alpha) alpha)
  ((numberp (cdr alpha)) (cdr alpha))
        ;; Also handle undocumented (<active> <inactive>) form.
        ((numberp (cadr alpha)) (cadr alpha))) 100)
        ava/transparency-level '(100 . 100)))))

#+end_src

* Rice Configs 
** Rice related stuffs
This is tangled in another file and hooked to start so we can manipulate outside emacs easier

#+begin_src emacs-lisp :tangle /home/alexvanaxe/.emacs.d/rice.el

  (defvar ava/default-font-size 105)
  (defvar ava/default-variable-font-size 105)

  (defun ava/rice-the-emacs ()
      (load-theme (get-theme) t)
      (set-face-attribute 'default nil :font (get-font) :height ava/default-font-size)
  )
#+end_src 

** Transparency Stuffs related
#+begin_src emacs-lisp

 ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
 ;;(set-frame-parameter (selected-frame) 'alpha <both>)
 (set-frame-parameter (selected-frame) 'alpha ava/transparency-level)
 (add-to-list 'default-frame-alist ava/transparency-level-list)

#+end_src

** Rice Hooks
Hooks to rice the emacs

#+begin_src emacs-lisp


  (add-hook 'emacs-startup-hook #'ava/rice-the-emacs)

#+end_src

* Required System packages

** Log Keys

Package to display the keys clicked. It is mostly used for presentations.

  #+begin_src emacs-lisp

            (use-package command-log-mode
              :disabled)

#+end_src

** ZFZ like support

Provides better selections for the emacs, searchable with fuzzy logic. There is a concorrent I never tested called *Helm*.

#+begin_src emacs-lisp

            (use-package ivy
            :diminish
            :bind (("C-s" . swiper)
                    :map ivy-minibuffer-map
                    ("TAB" . ivy-alt-done)	
                    ("C-l" . ivy-alt-done)
                    ("C-j" . ivy-next-line)
                    ("C-k" . ivy-previous-line)
                    :map ivy-switch-buffer-map
                    ("C-k" . ivy-previous-line)
                    ("C-l" . ivy-done)
                    ("C-d" . ivy-switch-buffer-kill)
                    :map ivy-reverse-i-search-map
                    ("C-k" . ivy-previous-line)
                    ("C-d" . ivy-reverse-i-search-kill))
            :config
            (ivy-mode 1))

#+end_src

** Better parenthesis

Putting some colors on parenthesis to try to help find where the corresponding closing-opening are. (Don't know for sure if works with {[...)

#+begin_src emacs-lisp

            (use-package rainbow-delimiters
            :hook (prog-mode . rainbow-delimiters-mode))

            (use-package hydra
                :after general)

#+end_src

** More information

Provides more information when a key is pressed like C-x.


#+begin_src emacs-lisp

            (use-package which-key
            :defer 0
            :diminish which-key-mode
            :config (which-key-mode)
            (setq which-key-idle-delay 1))

#+end_src

** Counseleir

Package related to ivy. It shows more information for the exec instructions and other stuffs. *Try to explore more*

#+begin_src emacs-lisp

            (use-package counsel
            :bind (("<f5>" . 'counsel-switch-buffer)
                    :map minibuffer-local-map
                    ("C-q" . 'counsel-minibuffer-history))
            :custom
            (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
            :config
            (counsel-mode 1))

#+end_src

** More ivy

Tries to provide more friendly interface for ivy. (*Trying to see the difference!*)

#+begin_src emacs-lisp

            (use-package ivy-rich
            :after ivy
            :init
            (ivy-rich-mode 1))

#+end_src

** Documentation

Providing some more info in the documentations

#+begin_src emacs-lisp

            (use-package helpful
            :commands (helpful-callable helpful-variable helpful-command helpful-key)
            :custom
            (counsel-describe-function-function #'helpful-callable)
            (counsel-describe-variable-function #'helpful-variable)
            :bind
            ([remap describe-function] . counsel-describe-function)
            ([remap describe-command] . helpful-command)
            ([remap describe-variable] . counsel-describe-variable)
            ([remap describe-key] . helpful-key))

#+end_src

** Keymaping general

Great package to facilitate the settings of the custom keys configuration. Mapped to SPC. It provides a lot of my mappings like move windows integration with hydra and etc...

#+begin_src emacs-lisp

            (use-package general
            :after evil
            :config
            (general-create-definer ava/leader-keys
            :keymaps '(normal emacs)
            :prefix ava/leader-key)
            (ava/leader-keys
                "t"  '(:ignore t :which-key "Tabs Handling")
                "tt" '(tab-new :which-key "New tab")
                "td" '(tab-close :which-key "Close the tab")
                "tc" '(tab-bar-mode :which-key "Hide the tab panel")
                "tn" '(tab-next :which-key "Go to the next tab")
                "tg" '(tab-bar-select-tab-by-name :which-key "Select the tab")

                "i1" '(lambda() (interactive)(find-file "~/.emacs.d/init.el"))
                "i2" '(lambda() (interactive)(find-file "~/Documents/Projects/MoneyWatch/coding-steps/MoneyWatch-api/money_watch/money_auth/views.py")))
            )

#+end_src

** Evil mode

VI key mappings for emacs.

#+begin_src emacs-lisp

      (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
      (define-key evil-normal-state-map (kbd (concat ava/leader-key " %")) 'evil-window-vsplit)
      (define-key evil-normal-state-map (kbd (concat ava/leader-key " \"")) 'evil-window-split)
      (define-key evil-normal-state-map (kbd (concat ava/leader-key " l")) 'evil-window-right)
      (define-key evil-normal-state-map (kbd (concat ava/leader-key " h")) 'evil-window-left)
      (define-key evil-normal-state-map (kbd (concat ava/leader-key " j")) 'evil-window-down)
      (define-key evil-normal-state-map (kbd (concat ava/leader-key " k")) 'evil-window-up)

      ;; Use visual line motions even outside of visual-line-mode buffers
      ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))

      (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

#+end_src

** IDEs stuffs.

Making IDE understand the git projects and treat them as projects.

#+begin_src emacs-lisp

      (use-package projectile
      :diminish projectile-mode
      :config (projectile-mode)
      :custom ((projectile-completion-system 'ivy))
      :bind-keymap
      ("<f4>" . projectile-command-map))
      :init
      ;; NOTE: Set this to the folder where you keep your Git repos!
      (when (file-directory-p "~/Documents/Projects/")
      (setq projectile-project-search-path '("~/Documents/Projects/")))

      (setq projectile-switch-project-action #'projectile-dired)

      (use-package counsel-projectile
      :after projectile
      :config (counsel-projectile-mode))

#+end_src

** GIT INtegration

Provides a very good git integration. Forge is disabled, look more info in it capabilities.

#+begin_src emacs-lisp

      (use-package magit
      :commands magit-status)
      ;; NOTE: Make sure to configure a GitHub token before using this package!
      ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
      ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

      ;; (use-package forge
      ;;  :after magit)

      (use-package lsp-mode
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
              (python-mode . lsp-deferred)
              (typescript-mode . lsp-deferred)
              ;; if you want which-key integration
              )
      :commands lsp-deferred
      :config
          (lsp-enable-which-key-integration t))

      (use-package lsp-jedi
      :after lsp-mode
      :ensure t
      :config
      (with-eval-after-load "lsp-mode"
          (add-to-list 'lsp-disabled-clients 'pyls)
          (add-to-list 'lsp-enabled-clients 'jedi)))

      (use-package lsp-ivy 
          :after lsp-mode
          :commands lsp-ivy-workspace-symbol)

      (use-package lsp-ui
          :after lsp-mode
          :config
          (setq lsp-ui-doc-position 'bottom))

      (use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind ("C-c c" . company-complete)
      :config
      (setq company-idle-delay nil)
      )

      (use-package org
      :pin org
      :commands (org-capture org-agenda)
      :hook (org-mode . ava/org-mode-setup)
      :config
      (setq org-ellipsis " ▾")

      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)

      (setq org-agenda-files
              '("~/Documents/Projects/orgs/rice.org"))

      (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))))


  (use-package visual-fill-column
    :init 
          (add-hook 'org-mode-hook #'ava/org-mode-visual-fill)
          (add-hook 'dired-mode-hook #'ava/dired-mode-visual-fill))


      ;; (use-package company-box
      ;;   :hook (company-mode . company-mode-box)
      ;;   )


      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      ;; (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
      ;; (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
      ;; (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  #+end_src
  
* Typescript Config

Configuration of the typescript language. We add a hook in the typescript-mode-hook.

#+begin_src emacs-lisp

    (use-package typescript-mode
      :after lsp-mode
      :mode "\\.ts\\'"
      :hook (typescript-mode . lsp-deferred)
      :config
    (with-eval-after-load "lsp-mode"
      (setq typescript-indent-level 2)
      (add-to-list 'lsp-enabled-clients 'ts-ls)
  ))

#+end_src

*For this to work the server needs be installed on the machine*

#+begin_src shell

paru -S typescript-language-server

#+end_src

* Vim diff like?

The diff vim like style

#+begin_src emacs-lisp

  (use-package vdiff
    :config
    (evil-define-key 'normal vdiff-mode-map ava/leader-key vdiff-mode-prefix-map))

#+end_src

* Eshell configs
Session with eshell config

#+begin_src emacs-lisp

(defun ava/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :after eshell)

(use-package eshell
  :hook (eshell-first-time-mode . ava/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim"))))

  ;(eshell-git-prompt-use-theme 'powerline))

#+end_src

* Dired configs

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-l --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (setq dired-dwim-target t)

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))


#+end_src

* Cosmetic Packages 
Here are the configs for the cosmetic packages.

** Doom themes and icons

#+begin_src emacs-lisp

      (use-package doom-themes)
      ;; Removing theme for testing porposes
  ;;        :init (load-theme 'doom-city-lights t))

      (use-package all-the-icons)

      (use-package doom-modeline
          :init (doom-modeline-mode 1)
          :custom ((doom-modeline-height 10)))

#+end_src

** Kaolin themes

#+begin_src emacs-lisp

;; Or if you have use-package installed
(use-package kaolin-themes)

#+end_src

** Cyberpunk

#+begin_src emacs-lisp

(use-package cyberpunk-theme)

#+end_src

* Configs

Here goes the configurations

** Random Configs
*** Column indicator

Set the size of the column indicator. I can add later some hooks if want different size depending on the language.

#+begin_src emacs-lisp

  (setq display-fill-column-indicator-column 100)

#+end_src

*** Random of Randoms

#+begin_src emacs-lisp
  
  (defun ava/org-mode-setup ()
  (org-indent-mode)
  (visual-line-mode 1))

  (defun ava/org-mode-visual-fill ()
  (setq visual-fill-column-width 150
    visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

  (defun ava/dired-mode-visual-fill ()
  (setq visual-fill-column-width 080)
  (visual-fill-column-mode 1))

  (with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("json" . "src js")))

  (with-eval-after-load 'org-faces
      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :weight 'regular :height (cdr face))))
      ;; (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))
  (setq org-confirm-babel-evaluate nil)

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)
        (js . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes))


#+end_src

** Org configs

#+begin_src emacs-lisp

#+end_src

* Keymappings
#+begin_src emacs-lisp

(with-eval-after-load 'general
  (defhydra window-resize (global-map "<F8>")
  "Resize the window"
  ("k" enlarge-window)
  ("j" shrink-window)
  ("l" enlarge-window-horizontally)
  ("h" shrink-window-horizontally)
  ("f" nil "finished" :exit t))

  (ava/leader-keys
      "y" '(counsel-load-theme :which-key "choose theme")
      "r" '(window-resize/body :which-key "Resize the window")
      "b" '(toggle-transparency :which-key "Toggle transparency")
  ))

#+end_src

* Testing other confs
Just a commented to make general confs. Put it in other config file!


** Test writing config file
   
  # #+begin_src conf-unix :tangle ~/testecfg

  # 	teste=23

  # #+end_src

** Little test passing values

  # #+NAME: result
  # #+begin_src python
  #   "Hello World"
  # #+end_src

  # #+begin_src conf-unix :tangle ~/teste2.cfg :noweb yes
  # 	valor=<<result>>
  # #+end_src 

* Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =ava/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  (defun ava/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name)) user-emacs-configs-directory))
        (org-babel-tangle)
        (message "tangled"))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ava/org-babel-tangle-config)))


#+end_src

* Not used packages
This session is only sugestions of packages that can be used in the future

- vterm - A terminal that is compiled. It is supposed to be quicker. [[https://github.com/akermu/emacs-libvterm][vterm on github]]

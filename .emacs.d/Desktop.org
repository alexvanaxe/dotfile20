#+title AVA Emacs desktop settings
#+PROPERTY: header-args:emacs-lisp :tangle ./desktop.el

* EMACS Desktop configs

** Basic stuffs

#+begin_src emacs-lisp

  (defun ava/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

#+end_src


** Functions definitions

#+begin_src emacs-lisp

  (defun ava/exwm-rename-buffer ()
    (interactive)
    (exwm-workspace-rename-buffer
     (concat exwm-class-name ":"
             (if (<= (length exwm-title) 50) exwm-title
               (concat (substring exwm-title 0 49) "...")))))

#+end_src


** The init Hook

#+begin_src emacs-lisp

      (defun ava/exwm-init-hook ()
        ;; (start-process-shell-command "set_wallpaper" nil "wallpaper_changer.sh")
        ;; (start-process-shell-command "set_theme" nil "theme_select.sh -emacs")
        (ava/run-in-background "nitrogen --restore")
        (with-eval-after-load 'doom-themes (load-theme (get-theme) t))
        )

      (defun ava/exwm-update-class ()
        (exwm-workspace-rename-buffer exwm-class-name))

      (defun ava/exwm-update-title ()
        (pcase exwm-class-name
          ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))

      ;; (defun ava/configure-window-by-class ()
      ;;   (interactive)
      ;;   (pcase exwm-class-name
      ;;     ("Firefox" (exwm-workspace-move-window 2))
      ;;     ("Sol" (exwm-workspace-move-window 3))
      ;;     ("mpv" (exwm-floating-toggle-floating)
      ;;      (exwm-layout-toggle-mode-line))))

#+end_src



** Use Package for exwm

#+begin_src emacs-lisp

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 10)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j  ;; Buffer list
            ?\C-\ ))  ;; Ctrl+Space


    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'ava/exwm-update-class)

    ;; When window title updates, use it to set the buffer name
    ;; (add-hook 'exwm-update-title-hook #'ava/exwm-update-title)

    ;; Add these hooks in a suitable place (e.g., as done in exwm-config-default)
    (add-hook 'exwm-update-class-hook 'ava/exwm-rename-buffer)
    (add-hook 'exwm-update-title-hook 'ava/exwm-rename-buffer)

    ;; Configure windows as they're created
    ;; (add-hook 'exwm-manage-finish-hook #'ava/configure-window-by-class)


    ;; When EXWM starts up, do some extra confifuration
    (add-hook 'exwm-init-hook #'ava/exwm-init-hook)

    (require 'exwm-randr)
    (exwm-randr-enable)
    (start-process-shell-command "xrandr" nil "display_manager.sh -o \"HDMI1 eDP1\"")
    (start-process-shell-command "primary" nil "display_manager.sh -p \"HDMI1\"")

    (start-process-shell-command "kmap" nil "setkmap")

    (setq exwm-randr-workspace-output-plist '(1 "HDMI1" 0 "eDP1" 9 "eDP1"))

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
    ;; Set up global key bindings.  These always work, no matter the input state!
    (setq exwm-input-global-keys
          `(
            ([?\s-r] . exwm-reset)
            ([?\s-d] . counsel-linux-app)

            ;; Launch applications via shell command
            ([?\s-$] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))


            ;; Movement keys
            ([?\s-h] . windmove-left)
            ([?\s-l] . windmove-right)
            ([?\s-k] . windmove-up)
            ([?\s-j] . windmove-down)

            ([?\s-w] . exwm-workspace-switch)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))
    (exwm-enable)

    )

#+end_src

* Non Lisp files

** The shell server

The idea is to start a server and then start a session with the client. It will in theory make the process a lot faster.

#+begin_src sh :tangle /home/alexvanaxe/bin/emacs-server.sh :tangle-mode (identity #o700)

  #! /bin/bash

  export WM_RUNNING="emacs"

  if [ "${theme_name}" = "day" ]; then
    theme="doom-gruvbox-light"
  fi


  emacs --daemon -bg "#000000" -fg "#ffffff" -mm --debug-init


#+end_src

** Start script. Lets try it.

Start the client.

#+begin_src sh :tangle /home/alexvanaxe/bin/wms/start-emacs.sh :tangle-mode (identity #o700)

  #! /bin/bash

  export WM_RUNNING="emacs"
  start_picom.sh

  if [ "${theme_name}" = "day" ]; then
    theme="doom-gruvbox-light"
  fi


  exec dbus-launch --exit-with-session emacs -bg "#000000" -fg "#ffffff" -mm --debug-init -l $HOME/.emacs.d/desktop.el 

#+end_src

** Guardado
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          ;; Move between windows
          '(


            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)
          
            ;; Movement keys
            ([?\s-h] . windmove-left)
            ([?\s-l] . windmove-right)
            ([?\s-k] . windmove-up)
            ([?\s-j] . windmove-down)

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)

            ([?\s-w] . exwm-workspace-switch)
                    ,@(mapcar (lambda (i)
                                `(,(kbd (format "s-%d" i)) .
                                (lambda ()
                                    (interactive)
                                    (exwm-workspace-switch-create ,i))))
                            (number-sequence 0 9))

            ))

    (exwm-enable)
    )

